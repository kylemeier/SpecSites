// Generated by CoffeeScript 1.3.3

$(function() {
  var $backedupSection, $body, $content, $conversationsSection, $coverSection, $device, $deviceWrapper, $doc, $downloadButtons, $downloadLink, $endingSection, $html, $memoriesSection, $sections, $video, $window, DEFAULT_FRICTION, DESKTOP_WIDTH, DOWN_KEY, LOGO_OFFSET_TOP_NARROW, LOGO_OFFSET_TOP_WIDE, PROPERTIES, STEP_SPEEDBUMP_RADIUS, SWIPE_DISTANCE, UP_KEY, VIDEO_URL, addMissingValues, animateStep, animationHandler, animationIntervalID, bodyHeight, cacheCSS, calcAnimationValue, calcFrictionModifier, conversationDelayID, cssCache, durationMultiplier, easeInOut, easeOut, endingTop, friction, getDefaultValueForKey, getUniqueAnimatedSelectors, handleBreakpoint, init, isAnimating, isCSSDiff, isDragging, isMobile, isPhone, isScrolling, isTablet, keydownHandler, logoOffsetTop, prevScrollY, prevWindowHeight, resizeHandler, scrollHandler, scrollRatio, scrollY, scrollYDiff, setLogoOffsetTop, setScrolling, setStep, startAnimating, step, steps, touchStartY, updateEnding, updateScrollStep, updateScrollY, updateScrolling, updateStepPositions, video_clicked, windowHeight;
  PROPERTIES = ['translateX', 'translateY', 'rotate', 'scale', 'opacity'];
  LOGO_OFFSET_TOP_WIDE = 590;
  LOGO_OFFSET_TOP_NARROW = 564;
  DESKTOP_WIDTH = 1024;
  SWIPE_DISTANCE = 40;
  DEFAULT_FRICTION = 0.25;
  STEP_SPEEDBUMP_RADIUS = 200;
  UP_KEY = 38;
  DOWN_KEY = 40;
  VIDEO_URL = 'https://player.vimeo.com/video/91475918';
  $doc = $(document);
  $window = $(window);
  $html = $('html');
  $body = $('body');
  $content = $('#content');
  $downloadLink = $('.download-link');
  $downloadButtons = $('.download-button');
  $sections = $('.section');
  $coverSection = $('#cover-section');
  $memoriesSection = $('#memories-section');
  $conversationsSection = $('#conversations-section');
  $backedupSection = $('#backedup-section');
  $endingSection = $('#ending-section');
  $deviceWrapper = $('#device-wrapper');
  $device = $('#device');
  $video = $('#video');
  cssCache = {};
  isAnimating = null;
  animationIntervalID = null;
  conversationDelayID = null;
  isDragging = false;
  isPhone = window.screen.width <= 480 && $html.hasClass('touch');
  isTablet = window.screen.width > 480 && window.screen.width <= 1024 && $html.hasClass('touch');
  isMobile = isPhone || isTablet;
  isScrolling = false;
  scrollY = 0;
  prevScrollY = 0;
  scrollYDiff = 0;
  touchStartY = 0;
  step = 1;
  friction = null;
  logoOffsetTop = null;
  windowHeight = null;
  prevWindowHeight = null;
  bodyHeight = null;
  scrollRatio = 0;
  endingTop = null;
  durationMultiplier = 1.5;
  steps = [
    {
      start: 0,
      duration: 960 * durationMultiplier,
      animations: [
        {
          selector: '#background',
          translateY: -662,
          unit: 'rem'
        }, {
          selector: '#cover-section',
          translateY: -662,
          unit: 'rem'
        }, {
          selector: '#cover-image',
          translateX: [0, -54],
          translateY: [-130, 67],
          rotate: [7, 0],
          scale: [1, 0.48],
          opacity: [1, 1]
        }, {
          selector: '#memories-section',
          translateY: [250, -80]
        }, {
          selector: '#conversations-section',
          opacity: [0, 0]
        }, {
          selector: '#backedup-section',
          opacity: [0, 0],
          unit: 'rem'
        }, {
          selector: '#ending-section',
          opacity: [0, 0]
        }, {
          selector: '#device',
          translateY: [550, 0],
          unit: 'rem'
        }, {
          selector: '#overlay-screen'
        }, {
          selector: '#screen-list',
          translateY: [550, 0],
          unit: 'rem'
        }, {
          selector: '#conversations-screen',
          opacity: [0, 0]
        }, {
          selector: '#conversations-response-screen',
          translateY: [168, 168],
          opacity: [0, 0]
        }, {
          selector: '#backedup-screen',
          opacity: [0, 0]
        }, {
          selector: '#image-list',
          translateY: [550, 0],
          unit: 'rem'
        }, {
          selector: '#kids-map-image',
          translateX: [79, 79],
          translateY: [-22, -22],
          scale: [0.46, 0.46]
        }, {
          selector: '#highway-image',
          translateX: [79, 79],
          translateY: [61, 61],
          scale: [0.46, 0.46]
        }, {
          selector: '#boy-fish-image',
          translateX: [-84, -84],
          translateY: [144, 144],
          scale: [0.46, 0.46]
        }, {
          selector: '#mom-dog-image',
          translateX: [-3, -3],
          translateY: [144, 144],
          scale: [0.46, 0.46]
        }, {
          selector: '#hands-image',
          translateX: [78, 78],
          translateY: [144, 144],
          scale: [0.46, 0.46]
        }, {
          selector: '#bear-fish-image',
          translateX: [-48, -48],
          translateY: [195, 195],
          scale: [0.51, 0.51],
          opacity: [0, 0]
        }, {
          selector: '#tent-image',
          translateX: [41, 41],
          translateY: [195, 195],
          scale: [0.51, 0.51],
          opacity: [0, 0]
        }, {
          selector: '#play-button',
          scroll: [0, 30],
          opacity: 0
        }
      ]
    }, {
      start: 0,
      duration: 600 * durationMultiplier,
      animations: [
        {
          selector: '#memories-section',
          translateY: -160,
          opacity: 0
        }, {
          selector: '#conversations-section',
          translateY: -80,
          opacity: 1
        }, {
          selector: '#overlay-screen',
          translateX: -252
        }, {
          selector: '#memories-screen',
          opacity: 0
        }, {
          selector: '#conversations-screen',
          opacity: [0, 1]
        }, {
          selector: '#highway-image',
          translateX: -64,
          translateY: -151,
          scale: 0.34
        }, {
          selector: '#kids-map-image',
          translateX: -3,
          translateY: -151,
          scale: 0.34
        }, {
          selector: '#hands-image',
          translateX: 57,
          translateY: -151,
          scale: 0.34
        }, {
          selector: '#mom-dog-image',
          translateX: -64,
          translateY: -90,
          scale: 0.34
        }, {
          selector: '#cover-image',
          translateX: -14,
          translateY: -42,
          scale: 0.17
        }, {
          selector: '#boy-fish-image',
          translateX: 57,
          translateY: -90,
          scale: 0.34,
          opacity: 1
        }, {
          selector: '#conversations-response-screen',
          translateY: 0,
          opacity: 1
        }, {
          selector: '#bear-fish-image',
          translateY: 27,
          opacity: 1
        }, {
          selector: '#tent-image',
          translateY: 27,
          opacity: 1
        }
      ]
    }, {
      start: 0,
      duration: 600 * durationMultiplier,
      animations: [
        {
          selector: '#conversations-section',
          translateY: -160,
          opacity: 0
        }, {
          selector: '#backedup-section',
          translateY: -80,
          opacity: 1,
          unit: 'rem'
        }, {
          selector: '#overlay-screen',
          translateX: 0
        }, {
          selector: '#conversations-screen',
          opacity: 0
        }, {
          selector: '#conversations-response-screen',
          opacity: 0
        }, {
          selector: '#backedup-screen',
          translateY: 0,
          opacity: 1,
          unit: 'rem'
        }, {
          selector: '#cover-image',
          translateX: -54,
          translateY: 28,
          scale: 0.48
        }, {
          selector: '#boy-fish-image',
          translateX: -85,
          translateY: -144,
          scale: 0.46
        }, {
          selector: '#mom-dog-image',
          translateX: -2,
          translateY: -144,
          scale: 0.46
        }, {
          selector: '#highway-image',
          translateX: 80,
          translateY: -144,
          scale: 0.46
        }, {
          selector: '#kids-map-image',
          translateX: 80,
          translateY: 22,
          scale: 0.46
        }, {
          selector: '#hands-image',
          translateX: 80,
          translateY: -61,
          scale: 0.46
        }, {
          selector: '#bear-fish-image',
          translateX: -84,
          translateY: 106,
          scale: 0.46
        }, {
          selector: '#tent-image',
          translateX: -2,
          translateY: 106,
          scale: 0.46
        }
      ]
    }, {
      start: 0,
      duration: 600 * durationMultiplier,
      animations: [
        {
          selector: '#device-wrapper',
          translateY: 0,
          unit: 'rem'
        }, {
          selector: '#backedup-section',
          translateY: 0,
          opacity: 0,
          unit: 'rem'
        }, {
          selector: '#ending-section',
          translateY: 0,
          opacity: 1,
          unit: 'rem'
        }
      ]
    }
  ];
  getDefaultValueForKey = function(key) {
    switch (key) {
      case 'translateX':
        return 0;
      case 'translateY':
        return 0;
      case 'rotate':
        return 0;
      case 'scale':
        return 1;
      case 'opacity':
        return 1;
      default:
        return null;
    }
  };
  getUniqueAnimatedSelectors = function() {
    var animatedSelectors, animation, _i, _j, _len, _len1, _ref, _step;
    animatedSelectors = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      _step = steps[_i];
      _ref = _step.animations;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        animation = _ref[_j];
        animation.$el = $(animation.selector);
        if ($.inArray(animation.selector, animatedSelectors) === -1) {
          animatedSelectors.push(animation.selector);
        }
      }
    }
    return animatedSelectors;
  };
  isCSSDiff = function(selector, transform, opacity) {
    return ("" + transform + "," + opacity) !== cssCache[selector];
  };
  setScrolling = function(_isScrolling) {
    if (isScrolling === _isScrolling) {
      return;
    }
    isScrolling = _isScrolling;
    $body.removeClass('is-scrolled');
    if (isScrolling) {
      return $body.addClass('is-scrolled');
    }
  };
  setLogoOffsetTop = function(_logoOffsetTop) {
    if (logoOffsetTop === _logoOffsetTop) {
      return;
    }
    logoOffsetTop = _logoOffsetTop;
    return scrollHandler();
  };
  setStep = function(_step) {
    if (_step < 1 || _step > 6) {
      return;
    }
    if (step > 3 && _step <= 3) {
      _step = 2;
    }
    clearTimeout(conversationDelayID);
    step = _step;
    document.body.className = document.body.className.replace(/step\-\d/, "step-" + step);
    $sections.removeClass('is-past is-present');
    if (step === 3) {
      return conversationDelayID = setTimeout((function() {
        return setStep(4);
      }), 500);
    }
  };
  init = function() {
    var animation, animationExists, prevAnimation, selector, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _step;
    _ref = getUniqueAnimatedSelectors();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      selector = _ref[_i];
      prevAnimation = null;
      for (_j = 0, _len1 = steps.length; _j < _len1; _j++) {
        _step = steps[_j];
        animationExists = false;
        _ref1 = _step.animations;
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          animation = _ref1[_k];
          if (animation.selector === selector) {
            animationExists = true;
            addMissingValues(animation, prevAnimation);
            prevAnimation = animation;
            break;
          }
        }
        if (!animationExists) {
          prevAnimation = addMissingValues({
            selector: selector,
            $el: $(selector)
          }, prevAnimation);
          _step.animations.push(prevAnimation);
        }
      }
    }
    $window.resize(resizeHandler);
    $doc.scroll(scrollHandler);
    $doc.keydown(keydownHandler);
    return resizeHandler();
  };
  easeInOut = function(t, b, c, d) {
    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
  };
  easeOut = function(t, b, c, d) {
    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
  };
  calcAnimationValue = function(animation, prop, ratio, easing) {
    var value;
    value = animation[prop];
    if (value) {
      if (easing === 'out') {
        value = easeOut(ratio, value[0], (value[1] - value[0]) * ratio, 1);
      } else {
        value = easeInOut(ratio, value[0], (value[1] - value[0]) * ratio, 1);
      }
      value = Math.round(value * 10000) / 10000;
    } else {
      value = getDefaultValueForKey(prop);
    }
    return value;
  };
  calcFrictionModifier = function(diff) {
    return ((STEP_SPEEDBUMP_RADIUS - diff) / STEP_SPEEDBUMP_RADIUS) * (DEFAULT_FRICTION - 0.01);
  };
  cacheCSS = function(selector, transform, opacity) {
    return cssCache[selector] = "" + transform + "," + opacity;
  };
  addMissingValues = function(animation, prevAnimation) {
    var prop, value, _i, _len;
    for (_i = 0, _len = PROPERTIES.length; _i < _len; _i++) {
      prop = PROPERTIES[_i];
      if (!(animation[prop] != null)) {
        if (prevAnimation) {
          value = prevAnimation[prop][1];
        } else {
          value = getDefaultValueForKey(prop);
        }
        animation[prop] = [value, value];
      } else if (!$.isArray(animation[prop])) {
        if (prevAnimation) {
          value = prevAnimation[prop][1];
        } else {
          value = getDefaultValueForKey(prop);
        }
        animation[prop] = [value, animation[prop]];
      }
    }
    return animation;
  };
  updateScrollY = function() {
    var endDiff, frictionModifier, startDiff, stepIndex;
    scrollYDiff = window.pageYOffset - scrollY;
    if (Math.abs(scrollYDiff) < 1) {
      clearInterval(animationIntervalID);
      scrollY = window.pageYOffset;
      return isAnimating = false;
    } else {
      stepIndex = step - 1;
      frictionModifier = 0;
      if (stepIndex > 0 && stepIndex < steps.length - 1) {
        startDiff = Math.abs(steps[stepIndex].start - scrollY);
        endDiff = Math.abs(steps[stepIndex].start + steps[stepIndex].duration - scrollY);
        if (stepIndex > 1 && startDiff < STEP_SPEEDBUMP_RADIUS) {
          frictionModifier = calcFrictionModifier(startDiff);
        }
        if (endDiff < STEP_SPEEDBUMP_RADIUS) {
          frictionModifier = calcFrictionModifier(endDiff);
        }
      }
      return scrollY += scrollYDiff * (friction - frictionModifier);
    }
  };
  updateScrolling = function() {
    if (scrollY > logoOffsetTop) {
      return setScrolling(true);
    } else {
      return setScrolling(false);
    }
  };
  updateScrollStep = function() {
    var i, stepNum, _i, _len, _results, _step;
    _results = [];
    for (i = _i = 0, _len = steps.length; _i < _len; i = ++_i) {
      _step = steps[i];
      stepNum = i + 1;
      if (scrollY <= _step.start + _step.duration) {
        if (stepNum > step && stepNum - 1 < steps.length - 1) {
          animateStep(stepNum - 1, 1);
        } else if (stepNum < step && stepNum + 1 < steps.length - 1) {
          animateStep(stepNum + 1, 0);
        }
        step = stepNum;
        animateStep(step);
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  handleBreakpoint = function() {
    endingTop = parseFloat($endingSection.css('top'));
    updateStepPositions();
    return updateEnding();
  };
  updateStepPositions = function() {
    steps[1].start = steps[0].start + steps[0].duration + 200 * durationMultiplier;
    steps[2].start = steps[1].start + steps[1].duration + 200 * durationMultiplier;
    return steps[3].start = steps[2].start + steps[2].duration + 300 * durationMultiplier;
  };
  updateEnding = function() {
    var remainingHeight;
    remainingHeight = $endingSection.outerHeight() - (windowHeight - endingTop);
    steps[3].duration = remainingHeight * 2;
    steps[3].animations[0].translateY = [0, -remainingHeight];
    steps[3].animations[1].translateY = [-80, -(remainingHeight + 80)];
    steps[3].animations[2].translateY = [0, -remainingHeight];
    $content.height(steps[3].start + steps[3].duration + windowHeight - 200);
    bodyHeight = $body.outerHeight();
    return $window.scrollTop(scrollRatio * (bodyHeight - windowHeight));
  };
  animateStep = function(step, _ratio) {
    var animation, endScroll, opacity, ratio, rotation, scale, startScroll, transform, translateX, translateY, unit, _i, _len, _ref, _results, _step;
    _step = steps[step - 1];
    friction = _step.friction || DEFAULT_FRICTION;
    _ref = _step.animations;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      animation = _ref[_i];
      animation.scroll = animation.scroll || [0, 100];
      startScroll = _step.start + (animation.scroll[0] / 100) * _step.duration;
      endScroll = _step.start + (animation.scroll[1] / 100) * _step.duration;
      ratio = _ratio || Math.max(0, Math.min(1, (scrollY - startScroll) / (endScroll - startScroll)));
      unit = animation.unit || 'em';
      translateX = calcAnimationValue(animation, 'translateX', ratio, _step.ease);
      translateY = calcAnimationValue(animation, 'translateY', ratio, _step.ease);
      scale = calcAnimationValue(animation, 'scale', ratio, _step.ease);
      rotation = calcAnimationValue(animation, 'rotate', ratio, _step.ease);
      opacity = calcAnimationValue(animation, 'opacity', ratio, _step.ease);
      if (unit !== '%') {
        translateX /= 16;
        translateY /= 16;
      }
      transform = "translate(" + translateX + unit + ", " + translateY + unit + ") scale(" + scale + ") rotate(" + rotation + "deg)";
      if (isCSSDiff(animation.selector, transform, opacity)) {
        animation.$el.css({
          transform: transform,
          opacity: opacity,
          display: 'block'
        });
        _results.push(cacheCSS(animation.selector, transform, opacity));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  startAnimating = function() {
    if (!isAnimating) {
      isAnimating = true;
      return animationIntervalID = setInterval(animationHandler, 1000 / 30);
    }
  };
  animationHandler = function() {
    updateScrollY();
    updateScrolling();
    updateScrollStep();
    return prevScrollY = scrollY;
  };
  video_clicked = function(e) {
    e.preventDefault();
    $body.addClass('is-modal is-video');
    return $video.html(("<iframe class='video-iframe' src='" + VIDEO_URL + "?title=0&amp;byline=0&amp;") + "portrait=0&amp;color=9f5c4a&amp;autoplay=1' width='100%' height='100%'" + "frameborder='0' webkitallowfullscreen mozallowfullscreen allowfullscreen>" + "</iframe>");
  };
  $('.video-link').click(video_clicked);
  $('#cover-image').click(video_clicked);
  if (conditionizr.ipad) {
    $('.iphone-button, .download-link').click(function(e) {
      e.preventDefault();
      return $body.addClass('is-modal');
    });
  } else if (!isMobile) {
    $downloadButtons.click(function(e) {
      e.preventDefault();
      return window.open(this.href);
    });
  }
  $('#modal').click(function(e) {
    if (e.target !== $video[0]) {
      $body.removeClass('is-modal is-video');
      return $video.html('');
    }
  });
  if (isPhone) {
    $downloadLink.click(function(e) {
      e.preventDefault();
      return window.location = $('.download-button:visible').attr('href');
    });
    $doc.on('touchstart', function(e) {
      isDragging = true;
      touchStartY = e.originalEvent.touches[0].pageY;
      if (e.target.id === 'logo') {
        e.preventDefault();
        isDragging = false;
        return setStep(1);
      }
    });
    $doc.on('touchmove', function(e) {
      var dy;
      e.preventDefault();
      if (isDragging) {
        dy = touchStartY - e.originalEvent.touches[0].pageY;
        if (dy > SWIPE_DISTANCE) {
          isDragging = false;
          return setStep(step + 1);
        } else if (dy < -SWIPE_DISTANCE) {
          isDragging = false;
          return setStep(step - 1);
        }
      }
    });
    $doc.on('touchend', function(e) {
      $body.removeClass('is-dragging');
      if (isDragging && $(e.target).hasClass('image-item')) {
        if (step < 6) {
          return setStep(step + 1);
        } else {
          return setStep(5);
        }
      }
    });
  }
  scrollHandler = function(e) {
    scrollRatio = $window.scrollTop() / (bodyHeight - windowHeight);
    if (!isAnimating) {
      return startAnimating();
    }
  };
  resizeHandler = function(e) {
    var windowWidth;
    windowWidth = window.innerWidth;
    windowHeight = $window.innerHeight();
    if (windowWidth >= DESKTOP_WIDTH && logoOffsetTop !== LOGO_OFFSET_TOP_WIDE) {
      setLogoOffsetTop(LOGO_OFFSET_TOP_WIDE);
      handleBreakpoint();
    } else if (windowWidth < DESKTOP_WIDTH && logoOffsetTop !== LOGO_OFFSET_TOP_NARROW) {
      setLogoOffsetTop(LOGO_OFFSET_TOP_NARROW);
      handleBreakpoint();
    }
    if (windowHeight !== prevWindowHeight) {
      updateEnding();
      return prevWindowHeight = windowHeight;
    }
  };
  keydownHandler = function(e) {
    switch (e.keyCode) {
      case UP_KEY:
        e.preventDefault();
        return $window.scrollTop($window.scrollTop() - 80);
      case DOWN_KEY:
        e.preventDefault();
        return $window.scrollTop($window.scrollTop() + 80);
    }
  };
  if (isPhone && window.isAndroid) {
    $body.addClass('is-android-phone');
  }
  if (!isMobile && !window.isStatic) {
    return init();
  }
});
